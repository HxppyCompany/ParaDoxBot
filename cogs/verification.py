import disnake
from disnake.ext import commands

from cogs.variables import System
from cogs.variables import Roles
from cogs.variables import Staff
from cogs.variables import Channels

'''BUTTONS'''


class GirlButton(disnake.ui.Button):
    def __init__(self, user):
        super().__init__(style=disnake.ButtonStyle.blurple, label="–î–µ–≤—É—à–∫–∞", custom_id="verifyg")
        self.user = user

    async def callback(self, interaction):
        member = interaction.guild.get_member(self.user.id)
        staff = interaction.guild.get_role(Staff.validator)
        if staff not in interaction.user.roles:
            embed = disnake.Embed(title="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                                  description="")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        verify_chs = [interaction.guild.get_channel(i) for i in Channels.verify]
        member_in_voice = False
        for ch in verify_chs:
            if member in ch.members:
                member_in_voice = True
        if not member_in_voice:
            embed = disnake.Embed(title="–ß–µ–ª–æ–≤–µ–∫ –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ",
                                  description="")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        try:
            unverify = interaction.guild.get_role(Roles.unverify)
            await member.remove_roles(unverify)
        except:
            pass
        role = interaction.guild.get_role(Roles.girl)
        await member.add_roles(role)
        await interaction.message.edit(view=None)
        embed = disnake.Embed(title=f"{member} –±—ã–ª–∞ –≤–µ—Ä–µ—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º {interaction.user}",
                              description="")
        await interaction.response.send_message(embed=embed)
        try:
            m_embed = disnake.Embed(title=f"–í–∞–ª–∏–¥–∞—Ç–æ—Ä {interaction.user} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª —Ç–µ–±—è",
                                    description="–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ!")
            await member.send(embed=m_embed)
        except Exception as e:
            print(f"[ERROR] {e}")


class BoyButton(disnake.ui.Button):
    def __init__(self, user):
        super().__init__(style=disnake.ButtonStyle.blurple, label="–ü–∞—Ä–µ–Ω—å", custom_id="verifym")
        self.user = user

    async def callback(self, interaction):
        member = interaction.guild.get_member(self.user.id)
        staff = interaction.guild.get_role(Staff.validator)
        if staff not in interaction.user.roles:
            embed = disnake.Embed(title="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                                  description="")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        verify_chs = [interaction.guild.get_channel(i) for i in Channels.verify]
        member_in_voice = False
        for ch in verify_chs:
            if member in ch.members:
                member_in_voice = True
        if not member_in_voice:
            embed = disnake.Embed(title="–ß–µ–ª–æ–≤–µ–∫ –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ",
                                  description="")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        try:
            unverify = interaction.guild.get_role(Roles.unverify)
            await member.remove_roles(unverify)
        except:
            pass
        role = interaction.guild.get_role(Roles.boy)
        await member.add_roles(role)
        await interaction.message.edit(view=None)
        embed = disnake.Embed(title=f"{member} –±—ã–ª –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º {interaction.user}",
                              description="")
        await interaction.response.send_message(embed=embed)
        try:
            m_embed = disnake.Embed(title=f"–í–∞–ª–∏–¥–∞—Ç–æ—Ä {interaction.user} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª —Ç–µ–±—è",
                                    description="–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ!")
            await member.send(embed=m_embed)
        except:
            pass


class RejectButton(disnake.ui.Button):
    def __init__(self, user):
        super().__init__(style=disnake.ButtonStyle.red, label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", custom_id="reject")
        self.user = user

    async def callback(self, interaction):
        member = interaction.guild.get_member(self.user.id)
        staff = interaction.guild.get_role(Staff.validator)
        if staff not in interaction.user.roles:
            embed = disnake.Embed(title="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                                  description="")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        embed = disnake.Embed(title=f"{member} –±—ã–ª(–∞) –Ω–µ–¥–æ–ø—É—â–µ–Ω(–∞) –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º {interaction.user}",
                              description="")
        await interaction.response.send_message(embed=embed)
        try:
            m_embed = disnake.Embed(title=f"–í–∞–ª–∏–¥–∞—Ç–æ—Ä {interaction.user} –Ω–µ–¥–æ–ø—É—Å—Ç–∏–ª —Ç–µ–±—è",
                                    description="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∞–ø–µ–ª–ª—è—Ü–∏—é —Ç—ã –º–æ–∂–µ—à—å –≤ –∫–∞–Ω–∞–ª–µ `„ÄéüìÉ„Äèappeal`")
            await member.send(embed=m_embed)
        except:
            pass
        unverify = interaction.guild.get_role(Roles.unverify)
        await member.remove_roles(unverify)
        localban_role = interaction.guild.get_role(Roles.localban)
        await member.add_roles(localban_role)
        await interaction.message.edit(view=None)


class VerifyView(disnake.ui.View):
    def __init__(self, user):
        super().__init__(timeout=None)
        self.add_item(GirlButton(user))
        self.add_item(BoyButton(user))
        self.add_item(RejectButton(user))


class Verification(commands.Cog, name='Verification'):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_member_join(self, member: disnake.Member):
        if member.bot:
            try:
                bot = member.guild.get_role(Roles.bot)
                return await member.add_roles(bot)
            except:
                pass
        rules_channel = self.bot.get_channel(1054280833361514589)
        staff_channel = self.bot.get_channel(Channels.verification)
        staff = member.guild.get_role(Staff.validator)
        try:
            unverify = member.guild.get_role(Roles.unverify)
            localban_role = member.guild.get_role(Roles.localban)
            await member.add_roles(unverify)
        except:
            pass

        'EMBED'
        embed = disnake.Embed(title="–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                              description=f"{member.mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.")
        embed.add_field(name="–ù–∏–∫",
                        value=member,
                        inline=True)
        embed.add_field(name="ID",
                        value=member.id,
                        inline=True)
        embed.add_field(name="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:",
                        value=member.created_at.strftime(System.date_format),
                        inline=True)
        try:
            embed.set_thumbnail(
                url=member.avatar.url)
        except:
            pass

        'DM_EMBED'
        dm_embed = disnake.Embed(title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ HappyServer!",
                                 description=f"{member.name}, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã "
                                             f"**–Ω–µ –≤–µ—Ä–µ—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n"
                                             f"–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –∑–∞–π–¥–∏—Ç–µ –≤ –æ–¥–∏–Ω –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ `verify`, "
                                             f"–≥–¥–µ –∫ –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç *–í–∞–ª–∏–¥–∞—Ç–æ—Ä*.\n"
                                             f"–¢–∞–∫ –∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å {rules_channel.mention} "
                                             f"–Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –≤–µ–¥—å ***–Ω–µ –∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç "
                                             f"–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏***!")

        try:
            await member.send(embed=dm_embed)
        except:
            pass
        await staff_channel.send(content=f"–ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ {staff.mention}",
                                 delete_after=0)
        await staff_channel.send(embed=embed,
                                 view=VerifyView(user=member))


def setup(bot):
    bot.add_cog(Verification(bot))
